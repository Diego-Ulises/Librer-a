/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.layout;

import com.datalayer.Cliente;
import com.datalayer.Libro;
import javax.swing.JOptionPane;
import com.datalayer.Handler;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Samuel
 */
public class Main extends javax.swing.JFrame {

    private ArrayList<Libro> libros;
    private ArrayList<Cliente> clientes;
    private Handler handler;
    private boolean mod=false;
    private int Nomina;
    private String Fecha;

    /**
     * Creates new form Main
     */
    public Main(int nomina) {
        initComponents();
        this.setLocationRelativeTo(null);
        Nomina=nomina;
        setFecha();
        handler = new Handler();
        updateArrays();
        updateLib();
        updateClientes();
    }

    private void setFecha() {
        Calendar Calendario = new java.util.GregorianCalendar();
        Fecha = "" + Calendario.get(Calendar.YEAR) + "-" + (Calendario.get(Calendar.MONTH) + 1) + "-" + Calendario.get(Calendar.DAY_OF_MONTH);
    }

    private void updateArrays() {
        libros = handler.showLib();
        clientes = handler.showClientes();
    }

    private void updateLib() {
        DefaultTableModel model = (DefaultTableModel) LibTable.getModel();
        model.getDataVector().removeAllElements();
        for (int i = (model.getRowCount()); i < libros.size(); i++) {
            Libro tmp = libros.get(i);
            Object[] rowData = new Object[]{tmp.getISBN(), tmp.getTitulo(), tmp.getCantidad(), tmp.getPrec()};
            model.addRow(rowData);
        }
        LibTable.updateUI();
    }

    private void updateClientes() {
        Clientes.removeAllItems();
        for (int i = 0; i < clientes.size(); i++) {
            Cliente tmp = clientes.get(i);
            Clientes.addItem("" + tmp.getCveCliente());
        }
        Clientes.updateUI();
    }
    
    public void init() {
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        AmountField = new javax.swing.JTextField();
        AddButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Sale = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ButtonsetSale = new javax.swing.JButton();
        AdminMode = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        LabelTotal = new javax.swing.JLabel();
        CloseAdminMode = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        LibTable = new javax.swing.JTable();
        CancelAll = new javax.swing.JButton();
        CancelSelected = new javax.swing.JButton();
        Clientes = new javax.swing.JComboBox<String>();
        jLabel5 = new javax.swing.JLabel();
        AdminRes = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        RegCliente = new javax.swing.JMenuItem();
        Pedidos = new javax.swing.JMenuItem();
        Registro = new javax.swing.JMenu();
        RLIbros = new javax.swing.JMenuItem();
        REdit = new javax.swing.JMenuItem();
        REmp = new javax.swing.JMenuItem();
        Consultas = new javax.swing.JMenu();
        RepVentas = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        Lib = new javax.swing.JMenuItem();
        Emp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jLabel1.setText("Cantidad");

        AddButton.setText("Agregar");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        Sale.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Título", "Cantidad", "Precio", "Subtotal", "# DV"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Sale);

        jLabel2.setText("Libros");

        jLabel3.setText("Detalle de Venta");

        ButtonsetSale.setText("Realizar venta");
        ButtonsetSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonsetSaleActionPerformed(evt);
            }
        });

        AdminMode.setText("Modo Administrador");
        AdminMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminModeActionPerformed(evt);
            }
        });

        jLabel4.setText("Total:");

        LabelTotal.setText("0.0");

        CloseAdminMode.setText("Salir modo Admin");
        CloseAdminMode.setEnabled(false);
        CloseAdminMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseAdminModeActionPerformed(evt);
            }
        });

        LibTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Título", "Existencia", "Precio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(LibTable);

        CancelAll.setText("Cancelar todo");
        CancelAll.setEnabled(false);
        CancelAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelAllActionPerformed(evt);
            }
        });

        CancelSelected.setText("Cancelar seleccion");
        CancelSelected.setEnabled(false);
        CancelSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelSelectedActionPerformed(evt);
            }
        });

        jLabel5.setText("Cliente");

        jMenu1.setText("Empleado");

        RegCliente.setText("Registrar Cliente");
        RegCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegClienteActionPerformed(evt);
            }
        });
        jMenu1.add(RegCliente);

        Pedidos.setText("Pedidos");
        Pedidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PedidosActionPerformed(evt);
            }
        });
        jMenu1.add(Pedidos);

        AdminRes.add(jMenu1);

        Registro.setText("Registro y Bajas");
        Registro.setEnabled(false);

        RLIbros.setText("Libros");
        RLIbros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RLIbrosActionPerformed(evt);
            }
        });
        Registro.add(RLIbros);

        REdit.setText("Editoriales");
        REdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REditActionPerformed(evt);
            }
        });
        Registro.add(REdit);

        REmp.setText("Empleados");
        REmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REmpActionPerformed(evt);
            }
        });
        Registro.add(REmp);

        AdminRes.add(Registro);

        Consultas.setText("Consultas y Modificaciones");
        Consultas.setEnabled(false);

        RepVentas.setText("Reporte de Ventas");
        RepVentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RepVentasActionPerformed(evt);
            }
        });
        Consultas.add(RepVentas);

        jMenuItem1.setText("Reporte de Pedidos");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        Consultas.add(jMenuItem1);

        Lib.setText("Libros");
        Lib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LibActionPerformed(evt);
            }
        });
        Consultas.add(Lib);

        Emp.setText("Empleado");
        Emp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmpActionPerformed(evt);
            }
        });
        Consultas.add(Emp);

        AdminRes.add(Consultas);

        setJMenuBar(AdminRes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Clientes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(AddButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(AmountField, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(AdminMode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(CloseAdminMode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(CancelAll, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                    .addComponent(CancelSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 20, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(32, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(ButtonsetSale, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LabelTotal)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CancelAll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(AmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(AdminMode)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CloseAdminMode)
                            .addComponent(CancelSelected)
                            .addComponent(AddButton)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Clientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(ButtonsetSale)
                    .addComponent(jLabel4)
                    .addComponent(LabelTotal))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        int row = LibTable.getSelectedRow();
        if (row >= 0) {
            int id = (int) LibTable.getValueAt(row, 0);
            int exist = (int) LibTable.getValueAt(row, 2);

            try {
                int amount = Integer.parseInt(AmountField.getText().trim());
                if (amount > 0) {
                    DefaultTableModel model = (DefaultTableModel) Sale.getModel();
                    DefaultTableModel model2 = (DefaultTableModel) LibTable.getModel();
                    libros.forEach((tmp) -> {
                        if (tmp.getISBN() == id) {
                            if (exist - amount >= 0) {
                                Object[] toAdd = new Object[]{tmp.getISBN(), tmp.getTitulo(), amount, tmp.getPrec(), (tmp.getPrec() * amount), tmp.getCantidad() - amount};
                                model2.setValueAt(exist - amount, row, 2);
                                model.addRow(toAdd);
                            } else {
                                JOptionPane.showMessageDialog(this, "Insuficiente existencia para: " + tmp.getTitulo());
                            }
                        }
                    });
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Solo se puede vender cantidades positivas", "Revise cantidad", JOptionPane.WARNING_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Ingrese una cantidad valida");
            }
            setTotal();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Seleccione un libro de la tabla");
        }
    }//GEN-LAST:event_AddButtonActionPerformed

    private void ButtonsetSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonsetSaleActionPerformed
        if (Sale.getRowCount() > 0) {
            if (JOptionPane.showConfirmDialog(this, "Confirmar comprar por: " + LabelTotal.getText(), "Confirme", JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION) {
                String ticket = "Detalle: \n\n";
                int IDVenta = handler.Venta(Clientes.getSelectedItem().toString(), Nomina, Fecha, LabelTotal.getText());
                DefaultTableModel model = (DefaultTableModel) Sale.getModel();
                for (int i = 0; i < model.getRowCount(); i++) {
                    int ISBN = (int) model.getValueAt(i, 0);
                    int Cantidad = (int) model.getValueAt(i, 2);
                    int existenciaR = (int) model.getValueAt(i, 5);
                    handler.LibVen(IDVenta, ISBN, Cantidad);
                    handler.reducirExistencia(ISBN, existenciaR);
                    ticket += model.getValueAt(i, 1) + "  Cantidad: " + model.getValueAt(i, 2)+"\n";
                }
                ticket += "Total: " + LabelTotal.getText();
                JOptionPane.showMessageDialog(rootPane, ticket);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Agrege libros a la compra");
        }
        updateArrays();
        updateLib();
        CancelAllActionPerformed(null);
    }//GEN-LAST:event_ButtonsetSaleActionPerformed

    private void AdminModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminModeActionPerformed
        if (JOptionPane.showInputDialog(this, "Ingresa la contraseña: ").equals("admin")) {
            Registro.setEnabled(true);
            Consultas.setEnabled(true);
            CloseAdminMode.setEnabled(true);
            AdminMode.setEnabled(false);
            CancelAll.setEnabled(true);
            CancelSelected.setEnabled(true);
            mod=true;
        }
    }//GEN-LAST:event_AdminModeActionPerformed

    private void CloseAdminModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseAdminModeActionPerformed
        Registro.setEnabled(false);
        Consultas.setEnabled(false);
        CloseAdminMode.setEnabled(false);
        AdminMode.setEnabled(true);
        CancelAll.setEnabled(false);
        CancelSelected.setEnabled(false);
        mod=false;
    }//GEN-LAST:event_CloseAdminModeActionPerformed

    private void CancelAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelAllActionPerformed
        DefaultTableModel model = (DefaultTableModel) Sale.getModel();
        model.getDataVector().removeAllElements();
        updateLib();
        Sale.updateUI();
    }//GEN-LAST:event_CancelAllActionPerformed

    private void CancelSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelSelectedActionPerformed
        int row=Sale.getSelectedRow();
        DefaultTableModel model=(DefaultTableModel) Sale.getModel();
        returnExist((int)model.getValueAt(row, 0), (int)model.getValueAt(row, 2));
        model.removeRow(row);        
        Sale.updateUI();
    }//GEN-LAST:event_CancelSelectedActionPerformed

    private void RegClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegClienteActionPerformed
        new RegCliente(mod).init();
    }//GEN-LAST:event_RegClienteActionPerformed

    private void REditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REditActionPerformed
        new RegEdit(mod).init();
    }//GEN-LAST:event_REditActionPerformed

    private void PedidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PedidosActionPerformed
        new Ped(Nomina).init();
    }//GEN-LAST:event_PedidosActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        updateArrays();
        if(Sale.getRowCount()==0){
            updateLib();
        }
        updateClientes();
    }//GEN-LAST:event_formWindowGainedFocus

    private void RLIbrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RLIbrosActionPerformed
        new RegLib(mod).init();
    }//GEN-LAST:event_RLIbrosActionPerformed

    private void REmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REmpActionPerformed
        new RegEmp(mod).init();
    }//GEN-LAST:event_REmpActionPerformed

    private void RepVentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RepVentasActionPerformed
        new RepVentas().init();
    }//GEN-LAST:event_RepVentasActionPerformed

    private void LibActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LibActionPerformed
        new ADLibros().init();
    }//GEN-LAST:event_LibActionPerformed

    private void EmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmpActionPerformed
         new ADEmp().init();
    }//GEN-LAST:event_EmpActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        new RepPedidos().init();
    }//GEN-LAST:event_jMenuItem1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton AdminMode;
    private javax.swing.JMenuBar AdminRes;
    private javax.swing.JTextField AmountField;
    private javax.swing.JButton ButtonsetSale;
    private javax.swing.JButton CancelAll;
    private javax.swing.JButton CancelSelected;
    private javax.swing.JComboBox<String> Clientes;
    private javax.swing.JButton CloseAdminMode;
    private javax.swing.JMenu Consultas;
    private javax.swing.JMenuItem Emp;
    private javax.swing.JLabel LabelTotal;
    private javax.swing.JMenuItem Lib;
    private javax.swing.JTable LibTable;
    private javax.swing.JMenuItem Pedidos;
    private javax.swing.JMenuItem REdit;
    private javax.swing.JMenuItem REmp;
    private javax.swing.JMenuItem RLIbros;
    private javax.swing.JMenuItem RegCliente;
    private javax.swing.JMenu Registro;
    private javax.swing.JMenuItem RepVentas;
    private javax.swing.JTable Sale;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables

    private void setTotal() {
        DefaultTableModel model = (DefaultTableModel) Sale.getModel();
        int sum = 0;
        for (int i = 0; i < model.getRowCount(); i++) {
            sum = sum + (int) model.getValueAt(i, 4);
        }
        LabelTotal.setText("" + sum);
    }
    
    private void returnExist(int id, int toReturn) {
        DefaultTableModel model=(DefaultTableModel) LibTable.getModel();
        for(int i=0; i<model.getRowCount(); i++){
            if((int)model.getValueAt(i, 0)==id){
                model.setValueAt((int)model.getValueAt(i, 2)+toReturn, i, 2);
            }
        }
        LibTable.updateUI();
    }
}
